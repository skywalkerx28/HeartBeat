"""
HeartBeat Engine - Hockey Context Loader
Loads hockey analytics context to make the model an expert

Provides metric explanations, sample size interpretation, and strategic context
so the model can intelligently interpret statistics like a professional analyst.
"""

import json
from pathlib import Path
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)


class HockeyContextLoader:
    """
    Loads hockey metric context to enhance model intelligence.
    
    Provides:
    - Metric definitions and interpretations
    - Sample size context (critical for stats like XGF%)
    - Common game situations for each metric
    - Strategic implications
    """
    
    def __init__(self, context_directory: str = "data/processed/llm_model/context/mtl_team_stats_explained"):
        """
        Initialize context loader.
        
        Args:
            context_directory: Directory containing metric context JSON files
        """
        self.context_dir = Path(context_directory)
        self.contexts = self._load_all_contexts()
        
        logger.info(f"Hockey Context Loader initialized with {len(self.contexts)} metric contexts")
    
    def _load_all_contexts(self) -> Dict[str, Dict]:
        """Load all context JSON files"""
        contexts = {}
        
        if not self.context_dir.exists():
            logger.warning(f"Context directory not found: {self.context_dir}")
            return contexts
        
        for json_file in self.context_dir.glob("*.json"):
            if json_file.name == "index.json":
                continue
            
            try:
                with open(json_file, 'r') as f:
                    context = json.load(f)
                    context_id = context.get("id", json_file.stem)
                    contexts[context_id] = context
            except Exception as e:
                logger.warning(f"Could not load context file {json_file}: {e}")
        
        return contexts
    
    def get_metric_interpretation_rules(self) -> str:
        """
        Get general rules for interpreting hockey metrics intelligently.
        
        Returns:
            Context string with interpretation guidelines
        """
        return """
HOCKEY METRICS INTERPRETATION RULES (CRITICAL):

Sample Size Context:
- TOI < 50 minutes: VERY SMALL SAMPLE - percentages unreliable (e.g., 1.000 XGF% = 1 shot)
- TOI 50-200 minutes: SMALL SAMPLE - use with caution, mention sample size
- TOI > 200 minutes: RELIABLE SAMPLE - percentages meaningful
- Compare TOI between units to identify primary vs secondary deployment

Power Play Units:
- Unit with MOST TOI = primary PP unit (typically 70-80% of PP time)
- Perfect stats (100%, 1.000) with low TOI = small sample, not elite performance
- XGF% measures shot quality, not goals scored
- OZst% (offensive zone start %) near 90%+ is normal for PP units

Expected Goals (XGF):
- XGF = predicted goals based on shot quality and location
- XGF% = team XGF / (team XGF + opponent XGF)
- XGF% > 0.55 = dominating shot quality
- XGF% < 0.45 = being out-chanced

Always Consider Context:
- Who is the opponent? (Elite teams vs bottom teams)
- What's the sample size? (TOI, games played)
- What's the game situation? (PP, PK, ES, score effects)
- What's the trend? (improving vs declining)
"""
    
    def get_context_for_analysis_type(self, analysis_type: str) -> Optional[str]:
        """
        Get specific context for an analysis type.
        
        Args:
            analysis_type: Type of analysis (power_play, matchup, etc.)
            
        Returns:
            Relevant hockey context string
        """
        context_map = {
            "power_play": self._get_power_play_context(),
            "penalty_kill": self._get_penalty_kill_context(),
            "matchup": self._get_matchup_context(),
            "player_stats": self._get_player_stats_context()
        }
        
        return context_map.get(analysis_type)
    
    def _get_power_play_context(self) -> str:
        """Get power play specific context"""
        return """
POWER PLAY ANALYSIS CONTEXT:

Understanding PP Units:
- PP1 (primary): Most TOI, best players, highest ice time (typically 70-80% of PP time)
- PP2+ (secondary): Backup units, less TOI, often used when PP1 tired or specific matchups

Reading PP Metrics:
- XGF% near 1.000 with low TOI: Small sample size - likely went out once, got 1 shot
- XGF% 0.60-0.80 with high TOI: Consistent PP performance creating quality chances
- OZst% 85-95%: Normal for PP (they start with possession in OZ)
- SOT (Shots on Target): Total shots generated by unit

When Analyzing:
1. ALWAYS check TOI first - determines if sample size is meaningful
2. Compare units by TOI to identify primary vs secondary
3. Mention sample size limitations explicitly
4. Look at multiple metrics together (XGF%, SOT, TOI) not just one
"""
    
    def _get_penalty_kill_context(self) -> str:
        """Get penalty kill specific context"""
        return """
PENALTY KILL ANALYSIS CONTEXT:

PK Units work opposite to PP:
- Lower XGA (Expected Goals Against) = better penalty kill
- Higher DZ% (defensive zone time) = normal for PK
- Shot blocking and disruption key metrics
"""
    
    def _get_matchup_context(self) -> str:
        """Get matchup specific context"""
        return """
MATCHUP ANALYSIS CONTEXT:

Head-to-Head Context:
- ES (Even Strength) metrics most reliable - largest sample size
- PP/PK metrics vary by opportunity count
- Recent performance > historical in modern NHL
- Score effects matter (trailing teams shoot more)
"""
    
    def _get_player_stats_context(self) -> str:
        """Get player stats specific context"""
        return """
PLAYER STATS ANALYSIS CONTEXT:

Per-60 Metrics:
- Normalized to 60 minutes for fair comparison
- Accounts for ice time differences
- Percentile shows ranking among NHL peers

Context Critical:
- Role (1st line scorer vs 4th line checker)
- Ice time deployment (easy vs hard minutes)
- Linemate quality (playing with elite vs depth players)
"""
    
    def enhance_data_with_context(
        self,
        data: Dict,
        analysis_type: str
    ) -> Dict:
        """
        Enhance data dictionary with hockey context for intelligent interpretation.
        
        Args:
            data: Data dictionary from Parquet query
            analysis_type: Type of analysis
            
        Returns:
            Enhanced data with context guidance
        """
        enhanced = data.copy()
        
        # Add interpretation rules
        enhanced["interpretation_rules"] = self.get_metric_interpretation_rules()
        
        # Add specific context
        specific_context = self.get_context_for_analysis_type(analysis_type)
        if specific_context:
            enhanced["hockey_context"] = specific_context
        
        # Add sample size warnings if applicable
        if analysis_type == "power_play" and "pp_units" in data:
            enhanced["sample_size_warnings"] = self._generate_sample_size_warnings(data)
        
        return enhanced
    
    def _generate_sample_size_warnings(self, pp_data: Dict) -> List[str]:
        """Generate warnings about small sample sizes in PP units"""
        warnings = []
        
        for unit in pp_data.get("pp_units", []):
            toi_seconds = unit.get("TOI(sec)", 0)
            xgf_pct = unit.get("XGF%", 0)
            players = unit.get("Players", "")
            
            # Small sample size warning
            if toi_seconds < 3000:  # Less than 50 minutes
                minutes = toi_seconds / 60
                if xgf_pct > 0.90 or xgf_pct < 0.10:
                    warnings.append(
                        f"Unit '{players[:50]}...' has only {minutes:.1f} minutes TOI. "
                        f"XGF% of {xgf_pct:.3f} is likely sample size artifact, not true performance level."
                    )
        
        return warnings


# Global instance
_context_loader: Optional[HockeyContextLoader] = None


def get_hockey_context_loader() -> HockeyContextLoader:
    """Get or create global context loader instance"""
    global _context_loader
    
    if _context_loader is None:
        _context_loader = HockeyContextLoader()
    
    return _context_loader

